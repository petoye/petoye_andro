== API DOCUMENTATION

* Sign up - This API call creates a new user 

  Request type: POST
  URL: /users/signup

  Required parameters:
  * email 
  * password

  If successful it returns:
  * id of the user created, status: 201

  If not successful it returns (user email_id already present, email_id not having @, no password typed, no email_id typed):
  * errors: could not be created, status: 422

  Example:
  http://api.localhost.com:3000/users/signup
  email: ameyag@gmail.com
  password: 1234

  JSON returned as:
  {
    "id": 20
  }

* Basic info - This API call fills in user information like owner type, pet_type, pet_breed, username, location

  Request type: POST
  URL: /users/:id/basicinfo

  Required parameters:
  * id
  * username
  * otype
  * ptype
  * breed
  * lat (float)
  * lng (float)

  If successful it returns:
  * id of the user created, status: 200

  If not successful it returns:
  * errors: profile not set, status: 422

  Example:
  http://api.localhost.com:3000/users/20/basicinfo
  username: Anthony Martial
  otype: <anything>
  ptype: <anything>
  breed: <anything>
  lat: <anything>
  lng: <anything>

  JSON returned as:
  {
    "id": 20,
    "username": "Anthony Martial"
  }

* Creating posts - This API call will create a new post

  Request type: POST
  URL: /feeds/:uid/create

  Required paramters:
  * uid 
  * message
  * image (png,jpg,gif)

  If successful it returns:
  * id of the post created, status: 201

  If not successful it returns:
  * errors: could not create post, status: 422

  Example:
  http://api.localhost.com:3000/feeds/2/create
  message: <anything>
  image: <anything>

  JSON returned as:
  {
    "id": 27
  }

* Nearby posts - This API call will show all nearby feeds subject to a particular user

  Request type: GET
  URL: /feeds/:uid/nearbyfeeds

  Required parameters:
  * uid

  If successful it returns:
  * feeds of nearby users, status: 200

  Example:
  http://api.localhost.com:3000/feeds/11/nearbyfeeds

  JSON returned as:
  {
  "feeds": [
    {
      "id": 11,
      "username": "Allen",
      "feeds": []
    },
    {
      "id": 12,
      "username": "Grujic",
      "feeds": [
        {
          "message": "nice",
          "like_count": 2,
          "comment_count": 0
        },
        {
          "message": "nice 2",
          "like_count": 1,
          "comment_count": 0
        },
        {
          "message": "nice 3",
          "like_count": 1,
          "comment_count": 0
        },
        {
          "message": "nice 4",
          "like_count": 3,
          "comment_count": 0
        },
        {
          "message": "nice 5",
          "like_count": 2,
          "comment_count": 0
        },
        {
          "message": "nice new",
          "like_count": 2,
          "comment_count": 0
        },
        {
          "message": "nice new",
          "like_count": 2,
          "comment_count": 0
        },
        {
          "message": "nice new",
          "like_count": 6,
          "comment_count": 0
        },
        {
          "message": "nice new",
          "like_count": 4,
          "comment_count": 0
        },
        {
          "message": "nice new",
          "like_count": 1,
          "comment_count": 0
        },
        {
          "message": "nice new",
          "like_count": 4,
          "comment_count": 0
        },
        {
          "message": "nice new",
          "like_count": 3,
          "comment_count": 0
        }
      ]
    },
    {
      "id": 14,
      "username": "Matip",
      "feeds": []
    },
    {
      "id": 15,
      "username": "Bellerin",
      "feeds": []
    }
  ]
}

* Followed user feeds - This API call will show all the feeds from followed users

  Request type: GET
  URL: /feeds/:uid/followedfeeds

  Required parameters:
  * uid

  If successful it returns:
  * feeds of followed users, status: 200

  If not successful:
  * error: no followed user, status: 422

  Example:
  http://api.localhost.com:3000/feeds/19/followedfeeds

  JSON returned as:
  {
  "feeds": [
    {
      "message": "bruh",
      "like_count": 2,
      "comment_count": 0,
      "user_id": 3
    },
    {
      "message": "nice",
      "like_count": 2,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice 2",
      "like_count": 1,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice 3",
      "like_count": 1,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice 4",
      "like_count": 3,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice 5",
      "like_count": 2,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice new",
      "like_count": 2,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice new",
      "like_count": 2,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice new",
      "like_count": 6,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice new",
      "like_count": 4,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice new",
      "like_count": 1,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice new",
      "like_count": 4,
      "comment_count": 0,
      "user_id": 12
    },
    {
      "message": "nice new",
      "like_count": 3,
      "comment_count": 0,
      "user_id": 12
    }
  ]
}

* Like - This API call likes a post and stores the id of user who liked the post

  Request type: POST
  URL: /feeds/:pid/like

  Required parameters:
  * pid
  * uid

  If successful it returns:
  * liked_by whom and like_count, status: 200

  If not successful:
  * error: could not be liked, status: 422
  * error: already liked, status: 422

  Example:
  http://api.localhost.com:3000/feeds/21/like
  uid: 13

  JSON returned as:
  {
    "like_count": 7,
    "likedby": [
      "12",
      "11",
      "10",
      "14",
      "15",
      "16",
      "13"
    ]
  }

* Dislike - This API call dislikes a post and removes the id of user who disliked the post

  Request type: POST
  URL: /feeds/:pid/dislike

  Required parameters:
  * pid
  * uid

  If successful it returns:
  * updated liked_by whom and like_count, status: 200

  If not successful:
  * error: Could not be disliked, status: 422
  * error: Not liked so can't be disliked, status: 422

  Example:
  http://api.localhost.com:3000/feeds/21/dislike
  uid: 13

  JSON returned as:
  {
    "like_count": 6,
    "likedby": [
      "12",
      "11",
      "10",
      "14",
      "15",
      "16"
    ]
  }

* Show likes - Shows usernames who liked the post

  Request type: GET
  URL: /feeds/:pid/showlike

  Required parameters:
  * pid

  If successful it returns:
  * usernames, status: 200

  If not successful:
  * error: no likes yet , status: 422

  Example:
  http://api.localhost.com:3000/feeds/21/showlike

  JSON returned as:
  {
    "feeds": [
      {
        "username": "Bale"
      },
      {
        "username": "Allen"
      },
      {
        "username": "Grujic"
      },
      {
        "username": "Matip"
      },
      {
        "username": "Bellerin"
      },
      {
        "username": "KDB"
      }
    ]
  }

* Adding comment - This API call adds a comment

  Request type: POST
  URL: feeds/:pid/comment

  Required parameters:
  * uid
  * pid
  * comment

  If successful it returns:
  * id of the new comment and the comment message, status: 201

  If not successful:
  * error: could not comment, status: 422

  Example:
  http://api.localhost.com:3000/feeds/21/comment
  uid: <anything>
  comment: <anything>

  JSON returned as:

  {
    "id": 17,
    "comment_message": "hhahah"
  }

* Show comment - This API call shows who commented on post along with comment

  Request type: GET
  URL: feeds/:pid/showcomment

  Required parameters:
  * pid

  If successful it returns:
  * comment and username, status: 200

  If not successful:
  * error: no comments yet, status: 422

  Example:
  http://api.localhost.com:3000/feeds/12/showcomment

  JSON returned as:

  {
  "comments": [
    {
      "comment_message": "first ",
      "user": {
        "username": "KDB"
      }
    },
    {
      "comment_message": "second",
      "user": {
        "username": "KDB"
      }
    },
    {
      "comment_message": "third",
      "user": {
        "username": "KDB"
      }
    },
    {
      "comment_message": "fourth",
      "user": {
        "username": "Vardy"
      }
    },
    {
      "comment_message": "fifth",
      "user": {
        "username": "Mahrez"
      }
    },
    {
      "comment_message": "Ronaldo is the best",
      "user": {
        "username": "Morgan"
      }
    },
    {
      "comment_message": "Ronaldo is the best footballer",
      "user": {
        "username": "Morgan"
      }
    },
    {
      "comment_message": "Ronaldo is the best footballer",
      "user": {
        "username": "Morgan"
      }
    },
    {
      "comment_message": "Ronaldo is the best footballer",
      "user": {
        "username": "Morgan"
      }
    },
    {
      "comment_message": "niceeee",
      "user": {
        "username": "Grujic"
      }
    }
  ]
  }

* Report - This API call takes in a report from user, when no. of reports exceed 200 post gets deleted

  Request type: POST
  URL: /feeds/:pid/report

  Required parameters:
  * pid
  * report (1,2,3,4)

  If successful it returns:
  * post id and report, status: 200

  If not successful:
  * error: could not report, status: 422

  Example:
  http://api.localhost.com:3000/feeds/12/report
  report: 3

  JSON returned as:

  {
    "id": 12,
    "report": [
      4,
      3
    ]
  }

* Discover users - This API call lets you discover users you havent followed within 50 miles of you
  
  Request type: GET
  URL: /users/:id/discover

  Required parameters:
  * id

  If successful it returns:
  * users you havent followed within 50 miles of you, status: 200

  If no users satisfy criteria:
  * null

  Example:
  http://api.localhost.com:3000/users/11/discover
  
  JSON returned as:

  {
    "users": [
      {
        "owner_type": "pet owner",
        "username": "Grujic",
        "pet_type": "dog",
        "pet_breed": "dane"
      },
      {
        "owner_type": "pet owner",
        "username": "Matip",
        "pet_type": "bird",
        "pet_breed": "lovebirds"
      },
      {
        "owner_type": "pet owner",
        "username": "Bellerin",
        "pet_type": "cat",
        "pet_breed": "persian"
      }
    ]
  }

* Search - This API call searches for user, pet type or breed in db

  Request type: GET
  URL: /users/:query/:parameter/search

  Required parameters:
  * query
  * parameter (user,type,breed)

  If successful it returns:
  * search results username and basic info, status: 302

  If not successful:
  * null

  Example:
  http://api.localhost.com:3000/users/pu/breed/search

  JSON returned as:

  {
    "users": [
      {
        "owner_type": "pet owner",
        "username": "Drinkwater",
        "pet_type": "dog",
        "pet_breed": "pug"
      },
      {
        "owner_type": "pet owner",
        "username": "Payet",
        "pet_type": "dog",
        "pet_breed": "pug"
      },
      {
        "owner_type": "none",
        "username": "Morgan",
        "pet_type": "dog",
        "pet_breed": "pug"
      }
    ]
  } 

* Follow - This API call follows a particular user

  Request type: POST
  URL: /:myid/follow

  Required parameters:
  * myid
  * hisid

  If successful it returns:
  * id of new follow record and following and follower ids, status: 200

  If not successful:
  * error: could not follow, status: 422
  * error: already following

  Example:
  http://api.localhost.com:3000/19/follow
  hisid: 16

  JSON returned as:

  {
    "id": 7,
    "follower_id": 19,
    "following_id": 16
  }

* Show profile - This API call is used to show user's profile

  Request type: GET
  URL: users/:id/showprofile

  Required parameters:
  * id

  If successful it returns:
  * username, owner_type, pet_breed, pet_story, story_like_count, status: 200

  If not successful:
  * error: cant show profile , status: 422

  Example:
  http://api.localhost.com:3000/users/19/showprofile
  
  JSON returned as:

  {
    "id": 19,
    "owner_type": "none",
    "username": "Morgan",
    "pet_breed": "pug",
    "pet_story": null,
    "story_like_count": 0
  }

* Post story - This API call posts a story

  Request type: POST
  URL: /users/:id/poststory

  Required parameters:
  * id
  * story (max 300 words)

  If successful it returns:
  * story and like count, status: 200

  If not successful:
  * error: story not set, status: 422

  Example:
  http://api.localhost.com:3000/users/19/poststory
  story: <anything>

  JSON returned as:

  {
    "pet_story": "blahblah",
    "story_like_count": 0
  }

* Like story - This API call likes a users story

  Request type: GET
  URL: /users/:id/likestory

  Required parameters:
  * id

  If successful it returns:
  * story like count, status: 200

  If not successful:
  * error: could not like story, status: 422

  Example:
  http://api.localhost.com:3000/users/19/likestory

  JSON returned as:

  {
    "story_like_count": 1
  }

* User posts - This API call shows all user posts

  Request type: GET
  URL: /users/:id/posts

  Required parameters:
  * id

  If successful it returns:
  * all info of a post, status: 200

  If not successful:
  * error: no posts, status: 422

  Example:
  http://api.localhost.com:3000/users/12/posts

  JSON returned as:

{
  "users": [
    {
      "message": "nice",
      "like_count": 2,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice 2",
      "like_count": 1,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice 3",
      "like_count": 1,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice 4",
      "like_count": 3,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice 5",
      "like_count": 2,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice new",
      "like_count": 2,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice new",
      "like_count": 2,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice new",
      "like_count": 6,
      "comment_count": 3,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice new",
      "like_count": 4,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice new",
      "like_count": 1,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice new",
      "like_count": 4,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    },
    {
      "message": "nice new",
      "like_count": 3,
      "comment_count": 0,
      "user": {
        "username": "Grujic"
      }
    }
  ]
}

* New adoption - This API call allows to create new adoption

  Request type: POST
  URL: /adopt/:id/createadoption

  Required parameters:
  * id
  * type
  * breed
  * age
  * description
  * image

  If successful it returns:
  * id of new adoption, status: 200

  If not successful:
  * error: could not create adoption, status: 422

  Example:
  http://api.localhost.com:3000/adopt/19/createadoption
  type: <anything>
  breed: <anything>
  age: <anything>
  description: <anything>
  image: <anything>
  
  JSON returned as:

  {
    "id": 2
  }

* Show adoptions - This API call shows all adoptions

  Request type: GET
  URL: /adopt/show

  Required parameters:
  *

  If successful it returns:
  * shows all adoptions, status: 200

  If not successful:
  * error: null, status: 422

  Example:
  http://api.localhost.com:3000/adopt/show
  
  JSON returned as:

  {
    "adoptions": [
      {
        "pet_type": "dog",
        "breed": "lab",
        "age": 2,
        "description": "meh",
        "user": {
          "username": "Drinkwater"
        }
      }
    ]
  }

* Sending message - This API call allows you to send a message

  Request type: POST
  URL: /conversations

  Required parameters:
  * sender_id
  * recipient_id
  * body

  If successful it returns:
  * body, conversation_id, username, status: 200

  If not successful:
  * error: cant send message, status: 422

  Example:
  http://api.localhost.com:3000/conversations
  sender_id: 11
  recipient_id: 12
  body: woah

  JSON returned as:

  {
    "body": "woah",
    "conversation_id": 14,
    "user": {
      "username": "Allen"
    }
  }

* Checking for messages in conversation

  Request type: GET
  URL: /conversations/:sender_id/:recipient_id/open

  Required parameters:
  * sender_id
  * recipient_id

  If successful it returns:
  * message, user_id and username, status: 200

  If not successful:
  * error: no messages, status: 422

  Example:
  http://api.localhost.com:3000/conversations/7/5/open

  JSON returned as:

{
  "conversations": [
    {
      "body": "hello",
      "user_id": 5,
      "user": {
        "username": "Ronaldo"
      }
    },
    {
      "body": "hello2",
      "user_id": 5,
      "user": {
        "username": "Ronaldo"
      }
    },
    {
      "body": "hello back",
      "user_id": 7,
      "user": {
        "username": "Messi"
      }
    },
    {
      "body": "hello back",
      "user_id": 7,
      "user": {
        "username": "Messi"
      }
    },
    {
      "body": "hello back",
      "user_id": 7,
      "user": {
        "username": "Messi"
      }
    },
    {
      "body": "ronaldo is best",
      "user_id": 5,
      "user": {
        "username": "Ronaldo"
      }
    },
    {
      "body": "messi is best",
      "user_id": 7,
      "user": {
        "username": "Messi"
      }
    },
    {
      "body": "heyhey",
      "user_id": 7,
      "user": {
        "username": "Messi"
      }
    },
    {
      "body": "wooho",
      "user_id": 5,
      "user": {
        "username": "Ronaldo"
      }
    },
    {
      "body": "hahah",
      "user_id": 5,
      "user": {
        "username": "Ronaldo"
      }
    },
    {
      "body": "h6",
      "user_id": 7,
      "user": {
        "username": "Messi"
      }
    },
    {
      "body": "huhu",
      "user_id": 5,
      "user": {
        "username": "Ronaldo"
      }
    }
  ]
}

* All conversations a user has had

  Request type: GET
  URL: /conversations/:id/all

  Required parameters:
  * id

  If successful it returns:
  * usernames of people user is chatting with, status: 200

  If not successful:
  * error: no conversations, status: 422

  Example:
  http://api.localhost.com:3000/conversations/5/all
  
  JSON returned as:

  {
    "conversations": [
      {
        "username": "Rooney"
      },
      {
        "username": "Benzema"
      },
      {
        "username": "Griezmann"
      },
      {
        "username": "Messi"
      }
    ]
  }

*

  Request type:
  URL:

  Required parameters:
  * 

  If successful it returns:
  * , status: 200

  If not successful:
  * error: , status: 422

  Example:
  


  JSON returned as:











